#!/bin/bash

# Saisie du domaine obligatoire
while [[ -z "$DOMAIN" ]]; do
    read -p "Nom de domaine (ex: exemple.com) : " DOMAIN
done

read -p "Adresse IP du serveur backend (ex: 192.168.1.100, défaut: 127.0.0.1) : " BACKEND_IP
BACKEND_IP=${BACKEND_IP:-127.0.0.1}

read -p "Port du serveur backend (ex: 3000, défaut: 80) : " BACKEND_PORT
BACKEND_PORT=${BACKEND_PORT:-80}

read -p "Chemin du fichier de configuration Nginx (ex: /etc/nginx/sites-available/, défaut: /etc/nginx/sites-available/) : " NGINX_CONF_DIR
NGINX_CONF_DIR=${NGINX_CONF_DIR:-/etc/nginx/sites-available}

read -p "Limite de taille des fichiers (ex: 50M, défaut: illimité) : " MAX_UPLOAD_SIZE
MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-0}

read -p "Forcer HTTPS avec Certbot ? (y/n, défaut: y) : " FORCE_HTTPS
FORCE_HTTPS=${FORCE_HTTPS:-y}

# Définition du fichier de config avec slash entre le répertoire et le nom de domaine
CONF_FILE="$NGINX_CONF_DIR/$DOMAIN"

# Création du répertoire s'il n'existe pas
mkdir -p "$NGINX_CONF_DIR"

# Génération du fichier de configuration Nginx
cat <<EOF > "$CONF_FILE"
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://$BACKEND_IP:$BACKEND_PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # WebSockets
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    # Limite de taille des fichiers
    client_max_body_size $MAX_UPLOAD_SIZE;
}
EOF

# Création (ou mise à jour) du lien symbolique dans sites-enabled
ln -sf "$CONF_FILE" "/etc/nginx/sites-enabled/$DOMAIN"

# Test de la configuration et rechargement de Nginx
if nginx -t; then
    systemctl reload nginx
    echo "Configuration générée et activée pour $DOMAIN"
else
    echo "Erreur dans la configuration Nginx. Veuillez vérifier le fichier $CONF_FILE"
    exit 1
fi

# Activation de HTTPS avec Certbot si demandé
if [[ "$FORCE_HTTPS" == "y" ]]; then
    apt install -y certbot python3-certbot-nginx
    certbot --nginx -d "$DOMAIN"
    echo "HTTPS activé et forcé avec Certbot pour $DOMAIN"
fi
